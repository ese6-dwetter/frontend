name: Node.js push on develop branch

on:
  push:
    branches: [develop]

env:
  DOCKER_ORGANIZATION: ese6dwetter
  DOCKER_REPOSITORY: website-microservice
  KUBERNETES_NAMESPACE: dwetter-develop
  WEBSITE_URL: https://develop.dwetter.nl

jobs:
  sonarcloud-scan:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    runs-on: ubuntu-18.04
    container:
      image: node:12.16.2
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Decrypt the GPG encrypted config files
        run: gpg --quiet --batch --yes --passphrase ${{ secrets.GPG_PASSPHRASE }} --output ./src/config.json --decrypt ./src/config.develop.json.gpg

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build --if-present
        env:
          CI: false
      
      - name: Test
        run: npm test
        env:
          CI: false

      - name: Upload release artifact
        uses: actions/upload-artifact@v1
        with:
          name: release-artifact
          path: ./build

      - name: Upload Dockerfile artifact
        uses: actions/upload-artifact@v1
        with:
          name: dockerfile-artifact
          path: ./Dockerfile

      - name: Upload NGINX artifact
        uses: actions/upload-artifact@v1
        with:
          name: nginx-artifact
          path: ./nginx.conf

      - name: Upload Kubernetes artifact
        uses: actions/upload-artifact@v1
        with:
          name: kubernetes-artifact
          path: ./kube_develop
  
  deliver:
    needs: [sonarcloud-scan, build]
    runs-on: ubuntu-18.04
    steps:
      - name: Download release artifact
        uses: actions/download-artifact@v1
        with:
          name: release-artifact
          path: ./build
      
      - name: Download Dockerfile artifact
        uses: actions/download-artifact@v1
        with:
          name: dockerfile-artifact
          path: .

      - name: Download NGINX artifact
        uses: actions/download-artifact@v1
        with:
          name: nginx-artifact
          path: .

      - name: Deliver Docker image
        run: |
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
          docker build -t ${{ env.DOCKER_ORGANIZATION }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }} .
          docker push ${{ env.DOCKER_ORGANIZATION }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}
  
  deploy:
    needs: deliver
    runs-on: ubuntu-18.04
    steps:
      - name: Download Kubernetes artifact
        uses: actions/download-artifact@v1
        with:
            name: kubernetes-artifact
            path: ./kube_develop
      
      - name: Setup Kubectl
        uses: azure/setup-kubectl@v1

      - name: Set context via kubeconfig
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      
      - name: Deploy Kubernetes with manifests
        uses: azure/k8s-deploy@v1
        with:
            namespace: ${{ env.KUBERNETES_NAMESPACE }}
            manifests: |
              ./kube_develop/autoscaler.yaml
              ./kube_develop/certificate.yaml
              ./kube_develop/deployment.yaml
              ./kube_develop/ingress.yaml
              ./kube_develop/service.yaml
            images:  |
              ${{ env.DOCKER_ORGANIZATION }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}
  
  lighthouse-check:
    needs: deploy
    runs-on: ubuntu-18.04
    steps:
      - name: Create /tmp/lighthouse-report directory
        run: mkdir /tmp/lighthouse-report
      
      - name: Run Lighthouse check
        uses: foo-software/lighthouse-check-action@master
        with:
          apiToken: ${{ secrets.LIGHTHOUSE_TOKEN }}
          outputDirectory: /tmp/lighthouse-report
          urls: ${{ env.WEBSITE_URL }}

      - name: Upload Lighthouse report artifact
        uses: actions/upload-artifact@master
        with:
          name: lighthouse-report-artifact
          path: /tmp/lighthouse-report

  owasp-zap-baseline-scan:
    needs: deploy
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.3.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: ${{ env.WEBSITE_URL }}
          rules_file_name: .zap/rules.tsv
          cmd_options: -a
